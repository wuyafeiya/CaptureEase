const e={base:"\n    .screenshot-overlay {\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.5);\n      z-index: 99999;\n      pointer-events: none;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n  ",hint:'\n    .screenshot-hint {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: 12px;\n      color: white;\n      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;\n      text-align: center;\n      pointer-events: none;\n      user-select: none;\n      transition: opacity 0.3s ease;\n    }\n    \n    .screenshot-hint-text {\n      font-size: 24px;\n      line-height: 1.6;\n      text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);\n    }\n    \n    .screenshot-hint.hidden {\n      opacity: 0;\n    }\n  ',buttons:"\n    .screenshot-hint-button {\n      pointer-events: auto;\n      padding: 8px 16px;\n      border: 1px solid white;\n      border-radius: 6px;\n      color: white;\n      font-size: 13px;\n      cursor: pointer;\n      transition: all 0.2s ease;\n      margin-top: 8px;\n      background: transparent;\n      z-index: 10000008;\n      user-select: none;\n      -webkit-appearance: none;\n      -moz-appearance: none;\n      appearance: none;\n    }\n    \n    .screenshot-hint-button:hover {\n      background: rgba(255, 255, 255, 0.1);\n    }\n    \n    .screenshot-hint-button:focus {\n      outline: none;\n      box-shadow: none;\n    }\n  ",selection:"\n    .element-highlight {\n      position: absolute;\n      border: 2px dashed #0095ff !important;\n      background: rgb(0, 149, 255,0.3) !important;\n      pointer-events: none;\n      z-index: 1000000;\n      transition: all 0.15s ease-in-out;\n    }\n    \n    .selected-element {\n      position: absolute;\n      border: 2px dashed #fff !important;\n      z-index: 1000000;\n      cursor: move;\n      pointer-events: auto !important;\n      box-sizing: border-box !important;\n    }\n  ",handles:"\n    .resize-handle {\n      position: absolute;\n      width: 13px;\n      height: 13px;\n      background: #0095ff;\n      border: 1.5px solid #fff;\n      border-radius: 50%;\n      z-index: 1000002;\n      pointer-events: auto !important;\n      touch-action: none;\n      transform-origin: center center;\n    }\n    .resize-handle.nw { cursor: nw-resize; top: -6px; left: -6px; }\n    .resize-handle.ne { cursor: ne-resize; top: -6px; right: -6px; }\n    .resize-handle.sw { cursor: sw-resize; bottom: -6px; left: -6px; }\n    .resize-handle.se { cursor: se-resize; bottom: -6px; right: -6px; }\n    .resize-handle.n { cursor: n-resize; top: -8px; left: 50%; transform: translateX(-50%); }\n    .resize-handle.s { cursor: s-resize; bottom: -8px; left: 50%; transform: translateX(-50%); }\n    .resize-handle.w { cursor: w-resize; left: -8px; top: 50%; transform: translateY(-50%); }\n    .resize-handle.e { cursor: e-resize; right: -8px; top: 50%; transform: translateY(-50%); }\n  ",toolbar:"\n    .toolbar {\n      position: absolute;\n      bottom: -45px;\n      right: -1px;\n      height: 32px;\n      background: #ffffff;\n      border-radius: 6px;\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      padding: 0 4px;\n      gap: 4px;\n      z-index: 1000002;\n      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.12);\n      border: 1px solid rgba(0, 0, 0, 0.1);\n      opacity: 1;\n      transition: opacity 0.3s ease;\n    }\n    \n    .toolbar.hidden {\n      opacity: 0;\n    }\n    \n    .toolbar-button-visible {\n      background: #eeeeef;\n      color: #000;\n      border: none;\n      font-weight: bold;\n      cursor: pointer;\n      padding: 6px;\n      border-radius: 4px;\n    }\n    \n    .toolbar-button-visible:hover {\n      border: 2px solid #1e61e0;\n    }\n    \n    .toolbar-button {\n      background: #1e61e0;\n      color: white;\n      border: none;\n      cursor: pointer;\n      padding: 6px;\n      border-radius: 4px;\n    }\n    \n    .toolbar-button-cancel {\n      background: #eeeeef;\n      color: #000;\n      border: none;\n      cursor: pointer;\n      padding: 6px;\n      border-radius: 4px;\n    }\n  "},n={async init(e){await this.injectStyles(e.id),await this.injectScript(e.id),await this.sendInitMessage(e.id)},async injectStyles(n){const t=Object.values(e).join("\n");await chrome.scripting.insertCSS({target:{tabId:n},css:t})},async injectScript(e){await chrome.scripting.executeScript({target:{tabId:e},files:["content.js"]})},async sendInitMessage(e){await chrome.tabs.sendMessage(e,{action:"initScreenshot"})},async handleVisibleCapture(e,n){try{const t=(await chrome.storage.local.get("format")).format||"png";await chrome.downloads.download({url:e,filename:`visible-screenshot-${Date.now()}.${t}`,saveAs:!0});n({success:!0})}catch(e){n({success:!1,error:e.message})}},async handleAreaCapture(e,n,t){try{const r=await fetch(e);let a;if(n.sourceCanvas){const e=await fetch(n.sourceCanvas),t=await e.blob();a=await createImageBitmap(t)}const o=await r.blob(),s=await createImageBitmap(o),i=new OffscreenCanvas(n.width,n.height),c=i.getContext("2d");try{c.drawImage(s,n.x,n.y,n.width,n.height,0,0,n.width,n.height),n.sourceCanvas&&c.drawImage(a,0,0,n.width,n.height)}catch(e){}const d=(await chrome.storage.local.get("format")).format||"png",l=`image/${d}`,p=await i.convertToBlob({type:l}),h=new FileReader;h.onloadend=async()=>{try{await chrome.downloads.download({url:h.result,filename:`screenshot-${Date.now()}.${d}`,saveAs:!0});t({success:!0})}catch(e){t({success:!1,error:e.message})}},h.onerror=()=>{t({success:!1,error:"读取文件失败"})},h.readAsDataURL(p)}catch(e){t({success:!1,error:e.message})}}};async function t(n){await chrome.scripting.insertCSS({target:{tabId:n.id},css:Object.values(e).join("\n")}),await chrome.scripting.executeScript({target:{tabId:n.id},files:["content.js"]}),await chrome.tabs.sendMessage(n.id,{action:"initScreenshot"})}chrome.runtime.onMessage.addListener(((e,r,a)=>{if("print-shortcut"===e.action)return chrome.tabs.query({active:!0,currentWindow:!0},(async e=>{await t(e[0])})),!0;if("captureVisible"===e.action)return chrome.tabs.captureVisibleTab(null,{format:"png"},(e=>{chrome.runtime.lastError?a({success:!1,error:chrome.runtime.lastError.message}):n.handleVisibleCapture(e,a)})),!0;if("captureArea"===e.action)return chrome.tabs.captureVisibleTab(null,{format:"png"},(t=>{chrome.runtime.lastError?a({success:!1,error:chrome.runtime.lastError.message}):n.handleAreaCapture(t,e.area,a)})),!0;if("copyArea"===e.action){try{chrome.tabs.captureVisibleTab(null,{format:"png"},(async n=>{if(chrome.runtime.lastError)a({success:!1,error:chrome.runtime.lastError.message});else try{const t=await fetch(n),r=await t.blob(),o=await createImageBitmap(r),s=new OffscreenCanvas(e.area.width,e.area.height),i=s.getContext("2d");if(i.drawImage(o,e.area.x,e.area.y,e.area.width,e.area.height,0,0,e.area.width,e.area.height),e.area.sourceCanvas){const n=await createImageBitmap(await(await fetch(e.area.sourceCanvas)).blob());i.drawImage(n,0,0)}s.convertToBlob({type:"image/png"}).then((e=>{const n=new FileReader;n.onload=()=>{const e=n.result;a({success:!0,dataURL:e})},n.readAsDataURL(e)})).catch((e=>{}))}catch(e){a({success:!1,error:e.message})}}))}catch(e){a({success:!1,error:e.message})}return!0}})),chrome.commands.onCommand.addListener((e=>{"print-shortcut"===e&&chrome.tabs.query({active:!0,currentWindow:!0},(async e=>{await t(e[0])}))}));
